
#include "gtkscintilla.h"
#include "marshal.h"

enum {
/* ++Autogenerated -- start of generated code. Events (evt_enum) */
$evt_enum
/* --Autogenerated -- end of generated code. Events (evt_enum)*/
    LAST_SIGNAL
};
static guint signals[LAST_SIGNAL] = { 0 };

static void gtk_scintilla_class_init(GtkScintillaClass *class);
static void gtk_scintilla_on_sci_notify(GtkScintilla* self, gint id, struct SCNotification *notification, gpointer data);

G_DEFINE_TYPE_WITH_CODE(GtkScintilla, gtk_scintilla, (scintilla_get_type()), 
    /*G_ADD_PRIVATE (GtkScintilla)*/
)

static void
gtk_scintilla_class_init(GtkScintillaClass *class)
{
  GtkWidgetClass *widget_class;

  widget_class = (GtkWidgetClass*) class;
/* ++Autogenerated -- start of generated code. Events (evt_signals_array) */
$evt_signals_array
/* --Autogenerated -- end of generated code. Events (evt_signals_array)*/  
}

GtkWidget *gtk_scintilla_new(void)
{
    return g_object_new (GTK_TYPE_SCINTILLA, NULL);
}

//TODO:finalize?

static void
gtk_scintilla_init(GtkScintilla *self)
{
    g_signal_connect(self, SCINTILLA_NOTIFY,
                     G_CALLBACK(gtk_scintilla_on_sci_notify), NULL);
}

static void gtk_scintilla_on_sci_notify(GtkScintilla* self, gint id, struct SCNotification *notification, gpointer data)
{
    switch (notification->nmhdr.code)
    {
/* ++Autogenerated -- start of generated code. Events (evt_forward) */
$evt_forward
/* --Autogenerated -- end of generated code. Events (evt_forward)*/
    default:
        g_debug("gtk_scintilla: unhandled event %d\n", notification->nmhdr.code);
    }
}


/* ++Autogenerated -- start of generated code. Function definitions (function_def) */
$function_def
/* --Autogenerated -- end of generated code. Function definitions (function_def)*/
