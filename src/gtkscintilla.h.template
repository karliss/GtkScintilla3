#ifndef __GTK_SCINTILLA_H__
#define __GTK_SCINTILLA_H__

#include <gtk/gtk.h>
#include <Scintilla.h>
#include <ScintillaWidget.h>

#ifdef __cplusplus
extern "C" {
#endif

#define GTK_TYPE_SCINTILLA             (gtk_scintilla_get_type ())
#define GTK_SCINTILLA(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SCINTILLA, GtkScintillaClass))
#define GTK_SCINTILLA_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SCINTILLA, GtkScintillaClass))
#define GTK_IS_SCINTILLA(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SCINTILLA))
#define GTK_IS_SCINTILLA_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SCINTILLA))
#define GTK_SCINTILLA_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SCINTILLA, GtkScintillaClass))

typedef struct _GtkScintilla          GtkScintilla;
typedef struct _GtkScintillaClass     GtkScintillaClass;
typedef struct _GtkScintillaPrivate   GtkScintillaPrivate;


struct _GtkScintilla {
    ScintillaObject parent;
    //GtkSCCI sci;

    /*< private >*/
    //GtkScintillaPrivate *priv;
};

struct _GtkScintillaClass {
  ScintillaClass parent_class;

  // TODO: insert events here
  
  //TODO generate proper reserved count
  
  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType        gtk_scintilla_get_type      (void) G_GNUC_CONST;
GtkWidget *  gtk_scintilla_new           (void);

/* ++Autogenerated -- start of generated code. Function declarations */
/* --Autogenerated -- end of generated code. Function declarations */

#ifdef __cplusplus
}
#endif


#endif

